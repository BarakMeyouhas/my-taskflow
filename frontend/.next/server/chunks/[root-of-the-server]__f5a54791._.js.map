{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Dev/Portfolio/Next.js/my-taskflow/frontend/config/auth.ts"],"sourcesContent":["export const authConfig = {\r\n  // Backend API URL - update this to match your backend\r\n  backendUrl: process.env.BACKEND_URL || 'https://taskflowBackend.canadacentral-01.azurewebsites.net',\r\n  \r\n  // App name\r\n  appName: process.env.NEXT_PUBLIC_APP_NAME || 'TaskFlow',\r\n  \r\n  // Token storage key\r\n  tokenKey: 'taskflow_token',\r\n  \r\n  // Auth endpoints\r\n  endpoints: {\r\n    register: '/api/auth/register',\r\n    login: '/api/auth/login',\r\n    verify: '/api/auth/verify',\r\n  },\r\n  \r\n  // Protected routes that require authentication\r\n  protectedRoutes: [\r\n    '/',\r\n    '/projects',\r\n    '/calendar',\r\n    '/reports',\r\n  ],\r\n  \r\n  // Public routes that don't require authentication\r\n  publicRoutes: [\r\n    '/login',\r\n    '/register',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;AAAO,MAAM,aAAa;IACxB,sDAAsD;IACtD,YAAY,QAAQ,GAAG,CAAC,WAAW,IAAI;IAEvC,WAAW;IACX,SAAS,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IAE7C,oBAAoB;IACpB,UAAU;IAEV,iBAAiB;IACjB,WAAW;QACT,UAAU;QACV,OAAO;QACP,QAAQ;IACV;IAEA,+CAA+C;IAC/C,iBAAiB;QACf;QACA;QACA;QACA;KACD;IAED,kDAAkD;IAClD,cAAc;QACZ;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///C:/Dev/Portfolio/Next.js/my-taskflow/frontend/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { authConfig } from '@/config/auth';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { username, password } = body;\r\n\r\n    // Validate input\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { message: 'Username and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Call the backend API\r\n    const response = await fetch(`${authConfig.backendUrl}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return NextResponse.json(\r\n        { \r\n          message: 'Login successful',\r\n          token: data.token,\r\n          user: data.user\r\n        },\r\n        { status: 200 }\r\n      );\r\n    } else {\r\n      const errorData = await response.json();\r\n      return NextResponse.json(\r\n        { message: errorData.message || 'Login failed' },\r\n        { status: response.status }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return NextResponse.json(\r\n      { message: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAqC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,WAAW,MAAM,MAAM,GAAG,gHAAA,CAAA,aAAU,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YACtE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAU;YAAS;QAC5C;QAEA,IAAI,SAAS,EAAE,EAAE;YACf,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB,GACA;gBAAE,QAAQ;YAAI;QAElB,OAAO;YACL,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS,UAAU,OAAO,IAAI;YAAe,GAC/C;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}