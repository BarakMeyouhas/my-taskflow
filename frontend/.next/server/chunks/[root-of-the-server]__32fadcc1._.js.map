{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Dev/Portfolio/Next.js/my-taskflow/frontend/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { username, password } = body;\r\n\r\n    // Validate input\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { message: 'Username and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // TODO: Replace with actual backend API call\r\n    // For now, we'll simulate a successful login\r\n    const response = await fetch(`${process.env.BACKEND_URL || 'http://localhost:5225'}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return NextResponse.json(\r\n        { \r\n          message: 'Login successful',\r\n          token: data.token,\r\n          user: data.user\r\n        },\r\n        { status: 200 }\r\n      );\r\n    } else {\r\n      const errorData = await response.json();\r\n      return NextResponse.json(\r\n        { message: errorData.message || 'Login failed' },\r\n        { status: response.status }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return NextResponse.json(\r\n      { message: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAqC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,6CAA6C;QAC7C,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,WAAW,IAAI,wBAAwB,eAAe,CAAC,EAAE;YACnG,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAU;YAAS;QAC5C;QAEA,IAAI,SAAS,EAAE,EAAE;YACf,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB,GACA;gBAAE,QAAQ;YAAI;QAElB,OAAO;YACL,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS,UAAU,OAAO,IAAI;YAAe,GAC/C;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}